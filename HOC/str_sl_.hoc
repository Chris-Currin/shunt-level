D__MAINHOC = 1
load_file("nrngui.hoc")
load_file("TTreeVarPlot.hoc")
nrn_load_dll("../_mod/nrnmech.dll")

func lambda () { //Rm,Ra,d  - return lambda in um
        return sqrt(1e+4*($1/$2) *$3/4 )
}


n = 4
create dend1[n*2]
create connector
access dend1[0]


objref gr,tree,s,all,ssg[n]
objref imp
objref dendritic
objref iclamp
proc _init(){local x,i
	NSEG = 0
	all = new SectionList()
	dendritic = new SectionList()
	imp = new Impedance()	
	forsec "dend1" {
		all.append()
		Ra = 100
		insert pas
		e_pas = -65
		g_pas=1/10000 // S/cm2
		//insert extracellular 	// makes i_membrane available. Units will be in mA/cm2

		insert x_
		insert y_
		diam = 2
		L = lambda(1/g_pas,Ra,diam)
		nseg = 2*int(L/16) + 1 //at least every 2 um
	}
	connector {
		L = 0.01
		diam = 2
		nseg = 1
		Ra = 0.2
	}
	forsec all NSEG += nseg
	for i=0,n-1 connect dend1[i](0),connector(1)
	e_SSG = e_pas
	v_init = e_pas
	dend1[0] dendritic.append()
	iclamp = new IClamp(0.5)
	iclamp.del = 0
	iclamp.dur=1e100
	iclamp.amp=0 // nA
}

proc getSL(){
	finitialize()
	getDVV()
	finitialize()
	getDRR()
	finitialize()
	getDRR_alt()

}

proc getDRR(){
	for i=0,n-1 ssg[i].g = 0
	forsec all for(x) Rin_x_(x) = CalcRin(x)
	for i=0,n-1 ssg[i].g = 2e-3
	forsec all for(x) DRin_x_(x) =  CalcRin(x) - Rin_x_(x)
	forsec all for(x) SL_x_(x) = -DRin_x_(x)/Rin_x_(x)
}

func CalcRin(){
	imp.loc($1)
	imp.compute(0)
	return imp.input($1)
}

objref stimobj, stimvec, cvode, ivec
cvode = new CVode()
proc getDRR_alt(){
	for i=0,n-1 ssg[i].e = -65
	cvode.active(1)
	dend1[0] stimobj = new IClamp(0.5)
	tstop = 50
	stimobj.del = 1
	stimobj.dur = tstop
	stimobj.amp = 1 // nA
	for i=0,n-1 ssg[i].g = 0
	forsec all {
		for(x) {
			Rin_y_(x) = CalcRin2(x)
			//Rin_x_(x) = CalcRin(x)
		}
	}
	for i=0,n-1 ssg[i].g = 2e-3
	forsec all {
		for(x) {
			DRin_y_(x) =  CalcRin2(x) - Rin_y_(x)
			//DRin_x_(x) =  CalcRin(x) - Rin_x_(x)
			//printf("%.4f | %.4f | %.4f \n", DRin_y_(x) - DRin_x_(x), Rin_y_(x) - Rin_x_(x), CalcRin2(x) - CalcRin(x))
		}
	}
	forsec all for(x) {
		SL_y_(x) = -DRin_y_(x)/Rin_y_(x)
		//SL_x_(x) = -DRin_x_(x)/Rin_x_(x)
	}
	cvode.active(0)
}

func CalcRin2(){
	stimobj.loc($1)
	run()
	v2 = v($1)
	r2 = (v2 - e_pas)/(stimobj.i)
	return r2
}

func CalcAid(){
	// ratio(x) == |v(loc)/v(x)| == voltage downstream / voltage upstream (of source)
	//	https://www.neuron.yale.edu/phpBB/viewtopic.php?f=2&t=2816&p=11346&hilit=voltage+attenuation#p11346
	imp.loc($1) // d = $1
	imp.compute(0)
	return imp.ratio($2) // i = $2
}

func CalcAid2(){
	v1 = v($1)
	v2 = v($2)
	return (v1-e_pas)/(v2-e_pas)
}

proc getDVV(){localobj dendrite_exc_list, dendrite_voltage_list, dendrite_loc_voltage_list, x_vec, v_vec, integral_vec, tmp
	dendrite_voltage_list = new List()

	// Add vectors to record voltage at all discrete locations of each dendrite
	forsec "dend1" {
		dendrite_loc_voltage_list = new List()
		for (x){
			v_vec = new Vector()
			v_vec.record(&v(x))
			dendrite_loc_voltage_list.append(v_vec)
		}
		dendrite_voltage_list.append(dendrite_loc_voltage_list)
	}

	// vector of 'x' locations (done only once as every dend1 nseg is the same)
	x_vec = new Vector()
	i_loc = ssg[0].get_loc()
	input_index=0
	for (x) {
		x_vec.append(x)
		if(x<i_loc){
			// find index for input location
			input_index+=1
		}
	}

	tstop = 200


	// calculate Vbase (given no excitation)
	// 1. create a vector of size (tstop/dt) with every value=v_init
	v_vec = new Vector(tstop/dt,e_pas)
	// 2. create vector to hold the integral values
	integral_vec = new Vector()
	// 3. integrate (cumulative sum)
	integral_vec.integral(v_vec,1)
	// 4. get last value [integral_0^tstop voltage]
	Vbase = integral_vec.x[integral_vec.size()-1]
	printf("for tstop = %.0f, Vbase = %.1f\n",tstop,Vbase)
	
	// setup stims
	tmp = new IClamp(0.5)
	tmp.del = 0
	tmp.dur=tstop
	tmp.amp=1e-3 // nA

	for i=0,n-1 ssg[i].e = -65

	// calculate SL
	// for each dendrite...
	for i=0,dendrite_voltage_list.count()-1{
		// get list of voltage vectors for the ith dendrite
		dendrite_loc_voltage_list = dendrite_voltage_list.o(i)
		if (i==0){
			printf("i=%.0f\n \t  j |   SLd  |   Aid  | Aid imp \n",i)
		}
		// for each location's voltage recording...
		// 	see integral calculation as for Vd above
		for j=0,dendrite_loc_voltage_list.count()-1{
			d = x_vec.x[j]

			v_vec = dendrite_loc_voltage_list.o(j)
			
			// change Id location
			tmp.loc(d)

			for ssg_i=0,n-1{
				ssg[ssg_i].g = 0
				ssg[ssg_i].e = -65
			}

			finitialize()
			run()
			integral_vec = new Vector()
			integral_vec.integral(v_vec,1)

			Vd = integral_vec.x[integral_vec.size()-1] - Vbase

			// calculate Vdstar (and therefore SL) - excitation and inhibition
			for ssg_i=0,n-1 ssg[ssg_i].g = 2e-3
			finitialize()
			run()
			integral_vec = new Vector()
			integral_vec.integral(v_vec,1)
			// get last value of integral
			Vd_star = integral_vec.x[integral_vec.size()-1] - Vbase

			// DV/V calculation
			dend1[i] DVd = Vd_star - Vd
			dend1[i] SLd = -DVd/Vd		

			dend1[i] Aid_steady  = CalcAid(d,i_loc)
			dend1[i] Aid = CalcAid2(d,i_loc)
			dend1[i] SLd_y_(d) = SLd
			dend1[i] Aid_y_(d) = Aid

			if (i==0){
				printf(" \t %2.0f | %.4f | %.4f | %.4f \n",j,SLd, Aid, Aid_steady)
			}
		}
		if (i==0){
			printf("\n\n")
		}
	}
}

strdef filename
objref g2,g
proc main(){localobj vv
	_init()
	connector gr = new Graph()
	for i=0,n-1 dend1[i] ssg[i] = new SSG(0.4)
	getSL()

	// plot 'default' Impedance version
	connector tree = new TTreeRangeVarPlot("SL_x_","x_",dendritic,1,1,1)
	tree.show(gr)

	// plot time-varying version
	connector tree = new TTreeRangeVarPlot("SL_y_","y_",dendritic,1,2,1)
	tree.show(gr)
	connector tree = new TTreeRangeVarPlot("SLd_y_","y_",dendritic,1,3,1)
	tree.show(gr)
	gr.flush()
	doEvents()

	sprint(filename,"%d.ps",n)
	gr.exec_menu("View = plot")
	gr.yaxis(3)
	gr.size(0,755,0,0.3)
	gr.yaxis(0,0.3,0,3,2)	
	gr.xaxis(0,750,0.0,5,2)
	gr.exec_menu("10% Zoom out")
	//~ gr.printfile(filename)


	connector g = new Graph()
	// plot 'default' Impedance version
	connector tree = new TTreeRangeVarPlot("Rin_x_","x_",dendritic,1,1,1)
	tree.show(g)

	// plot time-varying version
	connector tree = new TTreeRangeVarPlot("Rin_y_","y_",dendritic,1,2,1)
	tree.show(g)
	g.flush()
	doEvents()

	
	g.yaxis(3)
	g.size(0,755,0,0.3)
	g.yaxis(0,200,0,3,2)	
	g.xaxis(0,750,0.0,5,2)
	g.exec_menu("View = plot")

	g.exec_menu("10% Zoom out")


	//g2 = new PlotShape()
	//g2.variable("SL_x_")
	//g2.exec_menu("Shape Plot")
	//g2.scale(0, 0.5)
	//g2.flush()
}

main()
